#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define MAX 100
#define TRUE 1
#define FALSE 0

void bisection_function(float *mid_point, float interval_start, float interval_end, int *iteration_count);
double polysum (int,double[],double);

int main()
{	
	int i,num; //
	double *A,*B; //
	
	#define A(I) (*(A + I)) //
	#define B(I) (*(B + I)) //
	
	printf("Enter degree of the polynom: ");
	scanf("%d",&num); //
	
	A = (double*)malloc((num+1)*sizeof(double));//
	B = (double*)malloc((num+1)*sizeof(double));//	
	
	for(i=num;i>=0;i--){  //
		printf("\nEnter the %d. coefficient of the polynom:",i);
		scanf	("%lf",&A(i));
	}
	
	printf ("Equation: \n"); //
	for(i=num;i>=0;i--){
		if(i!=0)
		printf(" (%.2lf)*x^%d + ",A(i),i);
		else if(i==0)
		printf(" %.2lf ",A(i));
	}
        
		int iteration_count, maximum_iteration_count; //
        float mid_point, interval_start, interval_end, error_allowed, root;//
        printf("Enter Interval Start Point:\t");
        scanf("%f", &interval_start);
        printf("Enter Interval End Point:\t");
        scanf("%f", &interval_end);
        printf("Enter Maximum Iterations To Allow:\t");
        scanf("%d", &maximum_iteration_count);
        printf("Enter Allowed Error Point:\t");
        scanf("%f", &error_allowed);
        
		bisection_function (&mid_point, interval_start, interval_end, &iteration_count);
        
        for(iteration_count = 0; iteration_count < maximum_iteration_count; mid_point = root)
        {
                if(polysum(num,A,interval_start) * polysum(num,A,mid_point) < 0)
                {
                        interval_end = mid_point;
                }
                else
                {
                        interval_start = mid_point;
                }
                bisection_function (&root, interval_start, interval_end, &iteration_count);
                if(fabs(root - mid_point) < error_allowed)
                {
                        printf("\nCalculated Root:\t%f\n", root);
                
                }
                
        }
        
        
  
}
 
void bisection_function(float *mid_point, float interval_start, float interval_end, int *iteration_count)
{
        *mid_point = (interval_start + interval_end) / 2;
        ++(*iteration_count);
        printf("Iteration\t%d:\t%f\n", *iteration_count, *mid_point);
}

#define A(I) (*(A + I))
double polysum(int degree, double *A, double x)
{
	int i;
	double sum=0.0;
	for ( i=0;i<=degree; i++)
	{
		sum += A(i)*pow(x,i);	
	}
	return sum;
}
#undef A(I)
